{
  "dai.sol": [
    " This program is a contract for a stablecoin called Dai. It includes functions for transferring, minting, burning, and approving tokens, as well as functions for relying and denying authorization. It also includes functions for math operations and EIP712 niceties. The contract was verified at Etherscan.io on 2019-11-14.",
    " This program is a contract called LibNote, which was verified at Etherscan.io on 2019-11-14. It is free software that is distributed with the GNU General Public License. It is written in the Solidity programming language version 0.5.12.",
    " This code is a contract for a LibNote event, which logs an anonymous event with a constant 6 words of calldata and four indexed topics: selector, caller, arg1 and arg2. It is free software under the GNU Affero General Public License. It is written in Solidity 0.5.12.",
    "\nThis contract Dai is a LibNote that stores a mapping of addresses to uints, which is publicly accessible.",
    " This function sets the value of the \"wards\" array at the given address to 1, and is only accessible with the given authentication.",
    " This code defines a function (deny) and a modifier (auth) to control access to an ERC20 token. It also defines the token's name, symbol, version, decimals, total supply, balance of, allowance, and nonces. Finally, it defines two events (Approval and Transfer) to track changes to the token.",
    " This is a function written in the programming language Solidity that adds two unsigned integers together and returns the result. It also requires that the result is greater than or equal to the first integer.",
    "\nThis code defines a function called \"sub\" which takes two unsigned integers (x and y) as parameters and returns an unsigned integer (z) which is the result of subtracting y from x. It also defines a public constant called \"PERMIT_TYPEHASH\" which is used for EIP712 niceties.",
    " This code creates a constructor function that assigns a value of 1 to the sender's wards, and sets the DOMAIN_SEPARATOR to a keccak256 hash of the name, version, chainId, and address of the verifying contract.",
    " This function allows a user to transfer a specified amount of tokens from their account to another account. It requires an address of the destination account and the amount of tokens to be transferred as parameters and returns a boolean value indicating the success of the transfer.",
    " This function transfers a specified amount of tokens from one address to another. It requires that the source address has enough balance and allowance, and updates the balance of both addresses accordingly. It also emits a Transfer event.",
    " This function mints a given amount of tokens to a given user, updating the user's balance and the total supply of tokens. It also emits a Transfer event.",
    " This function allows a user to burn a certain amount of tokens from their balance, and updates the total supply accordingly. It also checks for sufficient balance and allowance before burning.",
    " This function sets an allowance for a user, emitting an Approval event with the sender, user, and amount, and returns true.",
    " This code creates a function called \"push\" which allows a user to transfer a specified amount of tokens from their account to another user's account.",
    " This function allows a user to transfer a specified amount of funds (wad) from their address (usr) to the sender's address.",
    " This function allows for the transfer of a specified amount of funds (wad) from one address (src) to another address (dst) using the transferFrom() function.",
    " This function permits a holder to approve a spender to transfer a certain amount of funds. It requires the holder to provide a signature, a nonce, an expiry, and whether the transfer is allowed or not. It also checks that the holder is not address 0, that the holder's signature is valid, that the expiry is valid, and that the nonce is valid. If all checks pass, the allowance is set and an Approval event is emitted."
  ]
}